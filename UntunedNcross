# BUILDING THE MODEL
import pandas as pd
from sklearn.model_selection import train_test_split, KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score
import numpy as np

# Load the dataset
data = pd.read_csv('train.csv')

# Check for missing values and data types
print(data.info())
print(data.head())

# Clean column names by stripping whitespace
data.columns = data.columns.str.strip()

# Identify categorical columns
categorical_cols = data.select_dtypes(include=['object']).columns.tolist()

# Apply label encoding
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col].astype(str))  # Convert to string as we would get errors otherwise
    label_encoders[col] = le

# Define features and target
X = data.drop(columns=['UniqueID', 'loan_default'])  # Drop the target and ID
y = data['loan_default']

# Split dataset (This is just to keep consistency for later testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print("Classification Report for the Model:")
print(classification_report(y_test, y_pred))

# Perform N-fold (5-fold) cross-validation manually with KFold
kf = KFold(n_splits=5, shuffle=True, random_state=42)

cv_accuracies = []

for train_index, test_index in kf.split(X):
    # Split data
    X_train_fold, X_test_fold = X.iloc[train_index], X.iloc[test_index]
    y_train_fold, y_test_fold = y.iloc[train_index], y.iloc[test_index]
    
    # Train the model on each fold
    model.fit(X_train_fold, y_train_fold)
    
    # Predict and evaluate the accuracy on the test fold
    y_pred_fold = model.predict(X_test_fold)
    accuracy = accuracy_score(y_test_fold, y_pred_fold)
    cv_accuracies.append(accuracy)

# Print mean and standard deviation of accuracy from cross-validation
print("\nCross-Validation Mean Accuracy: ", np.mean(cv_accuracies))
print("Cross-Validation Standard Deviation of Accuracy: ", np.std(cv_accuracies))
